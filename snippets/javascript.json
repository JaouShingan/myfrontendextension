{
  "foo": {
    "prefix": "foo",
    "body": [
      "function ${1:fooName} (${2}) {",
      "\t${0}",
      "}"
    ],
    "description": "定义一个函数"
  },
  "fn": {
    "prefix": "fn",
    "body": [
      "${1:fooName} (${2}) {",
      "\t${0}",
      "}"
    ],
    "description": "定义一个函数"
  },
  "afn": {
    "prefix": "afn",
    "body": [
      "(${1}) => {",
      "\t${0}",
      "}"
    ],
    "description": "箭头函数"
  },
  "print console log": {
    "prefix": "log",
    "body": [
      "console.log('${2:fileName: ${TM_FILENAME/(.*)(\\..*)/${1}/} line$TM_LINE_NUMBER: }', ${3:'something'})${0}"
    ],
    "description": "console.log('something')"
  },
  "print console error": {
    "prefix": "error",
    "body": [
      "console.error('${2:fileName: ${TM_FILENAME/(.*)(\\..*)/${1}/} line$TM_LINE_NUMBER: }', ${3:'something'})${0}"
    ],
    "description": "console.error(\"something\")"
  },
  "setlocalStorage": {
    "prefix": "setlocalStorage",
    "body": [
      "localStorage.setItem('${1:itemName}', ${2:JSON.stringify(${3:'todo'})})"
    ],
    "description": "set a localStorage"
  },
  "getlocalStorage": {
    "prefix": "getlocalStorage",
    "body": [
      "localStorage.getItem('${1:itemName}')"
    ],
    "description": "get a localStorage"
  },
  "this.$t": {
    "prefix": "$t",
    "body": [
      "this.\\$t('${1}')${0}"
    ],
    "description": "国际化"
  },
  "deconstruct": {
    "prefix": "deconstruct",
    "body": [
      "const { $0 } = ${1}"
    ],
    "description": "解构"
  },
  "get and set object": {
    "prefix": "getset",
    "body": [
      "{",
      "\tget () { return },",
      "\tset (val) {}",
      "}"
    ]
  },
  ".then": {
    "prefix": ".then",
    "body": [
      ".then((${1:res}) => {\n\t${0}",
      "})"
    ],
    "description": "promise then"
  },
  ".catch": {
    "prefix": ".catch",
    "body": [
      ".catch((${1:error}) => {\n\t${0}",
      "})"
    ],
    "description": "promise catch"
  },
  ".finally": {
    "prefix": ".finally",
    "body": [
      ".finally(() => {\n\t${1}",
      "})"
    ],
    "description": "promise finally"
  },
  ".reduce": {
    "prefix": ".reduce",
    "body": [
      ".reduce((${1:prev}, ${2:curr}) => {",
      "\t${0}",
      "\treturn ${4:prev}",
      "}, ${3:{\\}})"
    ],
    "description": "array reduce"
  },
  ".map": {
    "prefix": ".map",
    "body": [
      ".map((${1:item}) => {",
      "\t${0}",
      "\treturn ${4:item}",
      "})"
    ],
    "description": "array map"
  },
  "newPromise": {
    "prefix": "newPromise",
    "body": [
      "new Promise((resolve, reject) => {",
      "\t${0}",
      "})"
    ],
    "description": "new Promise"
  }
}